---
- name: "check if server is standby (pg_is_in_recovery)"
  ansible.builtin.shell:
    psql -p "{{ postgresql_cluster_port }}" -t -X -A -c 'select pg_is_in_recovery()'
  become_user: "{{ postgresql_cluster_user }}"
  register: pg_is_in_recovery

- name: Ensure PostgreSQL xinetd user is present on the cluster.
  community.postgresql.postgresql_user:
    name: "{{ postgresql_cluster_xinetd_user | default('postgres_xinetd') }}"
    login_host: "localhost"
    login_user: "{{ postgresql_cluster_user }}"
    login_unix_socket: "{{ postgresql_cluster_unix_socket_directories[0] }}"
    port: "{{ postgresql_cluster_port }}"
    state: "present"
  no_log: false # "{{ postgres_users_no_log }}"
  become: true
  become_user: "{{ postgresql_cluster_user }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool) and pg_is_in_recovery.stdout_lines[0] == 'f'
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true

- name: Create xinetd user group
  ansible.builtin.group:
    name: "{{ postgresql_cluster_xinetd_user | default('postgres_xinetd') }}"
    state: present

- name: Create xinetd user
  ansible.builtin.user:
    name: "{{ postgresql_cluster_xinetd_user | default('postgres_xinetd') }}"
    group: "{{ postgresql_cluster_xinetd_user | default('postgres_xinetd') }}"
    create_home: true
    state: present

- name: Ensure that the xinetd packages are installed
  become: true
  ansible.builtin.package:
    name: "xinetd"
    state: present
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family != 'RedHat'

- name: Ensure that xinetd is started and enabled on boot
  tags: xinetd
  become: true
  ansible.builtin.service:
    name: "xinetd"
    state: started
    enabled: true
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family != 'RedHat'

- name: Template pgsqlchck script in place
  ansible.builtin.template:
    src: pgsqlchck.j2
    dest: /opt/pgsqlchk
    owner: "root"
    group: "root"
    mode: "0755"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)

- name: Template pgsqlchck service into /etc/xinet.d
  ansible.builtin.template:
    src: pgsqlchck_xinetd.j2
    dest: /etc/xinetd.d/pgsqlchk
    owner: "root"
    group: "root"
    mode: "0644"
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family != 'RedHat'

- name: Template pgsqlchck socket into /etc/systemd
  ansible.builtin.template:
    src: pgsqlcheck_systemd_socket.j2
    dest: /etc/systemd/system/pgsqlchk.socket
    owner: "root"
    group: "root"
    mode: "0644"
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family == 'RedHat'

- name: Template pgsqlchck service into /etc/systemd
  ansible.builtin.template:
    src: pgsqlcheck_systemd_service.j2
    dest: /etc/systemd/system/pgsqlchk@.service
    owner: "root"
    group: "root"
    mode: "0644"
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family == 'RedHat'

- name: "Add pgsqlchck line to /etc/services"
  ansible.builtin.lineinfile:
    path: /etc/services
    line: "pgsqlchk {{ postgresql_cluster_xinetd_port }}/tcp # Ansible Managed: pgsqlchk"
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family != 'RedHat'

- name: "Reload xinetd"
  become: true
  ansible.builtin.service:
    name: "xinetd"
    state: "reloaded"
    enabled: true
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family != 'RedHat'

- name: Ensure that systemd socket is started and enabled on boot
  tags: xinetd
  become: true
  ansible.builtin.service:
    name: "pgsqlchk.socket"
    state: started
    enabled: true
  when:
    - not (postgresql_cluster_is_monitor | default('False') | bool)
    - ansible_os_family == 'RedHat'

# - name: "Allow incoming access to the xinetd postgres port {{ postgresql_cluster_xinetd_port | default('23267') }} for all cluster clients"
#   ufw:
#     rule: allow
#     direction: in
#     src: "{{ item.ip }}/{{ item.subnet_mask | default('32') }}"
#     to_port: "{{ postgresql_cluster_xinetd_port | default('23267') }}"
#     comment: "pgsqlchk xinetd {{ postgresql_cluster_name }} - client: {{ item.name }}"
#   with_items: "{{ postgresql_cluster_allowed_clients | default([]) }}"
#   when: not (postgresql_cluster_is_monitor | default('False') | bool)
